<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<comment>DB 커넥션 연결정보 DEV </comment>
	<!-- database schema 명 -->
	<entry key="dbClient.database.schemaName">dbClient</entry>

	<!-- DB hosts 정보 -->
	<entry key="dbClient.database.host">127.0.0.1</entry>
	<!-- driver 정보  -->
	<entry key="dbClient.database.driver">com.mysql.jdbc.Driver</entry>
	<!-- connect param -->
	<entry key="dbClient.database.connect.param">autoReconnect=true&amp;useUnicode=true&amp;createDatabaseIfNotExist=true&amp;characterEncoding=utf-8</entry>

	<!-- 접속정보 -->
	<entry key="dbClient.database.url">jdbc:mysql://${dbClient.database.host}/${dbClient.database.schemaName}?${dbClient.database.connect.param}</entry>
	<entry key="dbClient.database.username">dbclient</entry>
	<entry key="dbClient.database.password">1234</entry>

	<!-- auto commit 설정 -->
	<entry key="dbClient.database.defaultAutoCommit">false</entry>
	<!-- 커넥션 풀 validation Query -->
	<entry key="dbClient.database.validationQuery">SELECT 1 FROM DUAL</entry>
	<!-- 커넥션 풀 validation timeout -->
	<entry key="dbClient.database.validationQueryTimeout">60</entry>

	<!--  한번에 사용할 수 있는 최대 DB 연결 수 / DB 연결풀의 최대 연결 개수. 0은 무제한이며, MySQL 데몬(mysqld)의 최대 연결개수(max_connections) -->
	<entry key="dbClient.database.maxActive">3</entry>
	<!-- 시작 Pool의 크기값 / 최초 초기화 커넥션 수-->
	<entry key="dbClient.database.initialSize">3</entry>
	<!-- Pool에 유지할 Idle DB 연결의 최소 수-->
	<entry key="dbClient.database.minIdle">3</entry>
	<!-- Pool에 유지할 Idle DB 연결의 최대 수 / DB 연결풀에서 보관할 최대 유휴(idle) DB 연결 개수. 0은 무제한 -->
	<entry key="dbClient.database.maxIdle">3</entry>
	<!-- 사용하지 않고 있는 DB 연결에 대해 사용가능해질 때까지 포기하지 않고 기다리는 최대 밀리초 단위의 시간. 기본값은 3000 / DB 연결이 반환되는 Timeout 시간이며, 이를 초과하면 예외가 발생한다. 1/1000 초가 단위이며 -1은 무한 대기--> 
	<entry key="dbClient.database.maxWait">5000</entry>
	<!-- DB연결을 Pool로부터 얻기 전에 검증할지 안할지 여부 -->
	<entry key="dbClient.database.testOnBorrow">true</entry>
	<!-- Pool로 DB 연결을 반환할 때 DB연결을 검증할지 여부-->
	<entry key="dbClient.database.testOnReturn">false</entry>
	<!-- true일 경우 비활성화 커넥션을 추출할 때 커넥션이 유효한지의 여부를 검사해서 유효하지 않은 커넥션은 풀에서 제거-->
	<entry key="dbClient.database.testWhileIdle">true</entry>
	<!-- Evict 쓰레드를 수행시 수행할 커넥션의 갯수-->
	<entry key="dbClient.database.numTestsPerEvictionRun">5</entry>
	<!-- Evict 쓰레드를 수행시, 만료여부를 체크할 시간을 정의. 기본값은 30분이며, 0으로 설정하면 IDLE 시간을 바탕으로 DB 연결을 강제 철거 되지 않습니다. 시간 단위는 1/1000초이다-->
	<entry key="dbClient.database.minEvictableIdleTimeMillis">10000</entry>
	<!-- 설정된 주기를 통해 Evict(유효하지 않는 커넥션/정의된 시간이 만료된 커넥션을 풀에서 제거) 쓰레드를 수행. 기본값은 -1이며, Evict 쓰레드를 결코 실행하지 않음을 뜻함-->
	<entry key="dbClient.database.timeBetweenEvictionRunsMillis">5000</entry>
	<!-- 사용가능한 DB 연결이 적은 경우, DBCP가 버려진 연결을 찾아 재활용. 기본(default)값은 false /  Exception이 발생한 DB 연결에 대한 제거설정(deprecated 된듯함..)-->
	<entry key="dbClient.database.removeAbandoned">true</entry>
	<!--  DBCP가 버려진 연결로 인식할 때까지의 시간을 초단위로 지정. 기본값은 5분(300초) / Exception이 발생한 DB 연결에 대한 제거설정(deprecated 된듯함..)-->
	<entry key="dbClient.database.removeAbandonedTimeout">60</entry>
	<!-- logAbandoned 매개변수의 기본값은 false인데 이것을 true로 변경하면, 버려지는 DB 연결을 유발하는 코드를 찾을 수 있는 stack trace의 로그를 작성 / Exception이 발생한 DB 연결에 대한 로그-->
	<entry key="dbClient.database.logAbandoned">true</entry>
	<!--  PreparedStatements를 풀링 할 것인지 결정한다. -->
	<entry key="dbClient.database.poolPreparedStatements">true</entry>

</properties>