<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<!-- Spring MVC @Controller programming model -->
	<mvc:annotation-driven/>

	<!-- 애너테이션 기반 스프링 빈 등록을 위한 컴포넌트 스캔 -->	
	<context:component-scan base-package="com.song7749.app" />
	
    <!-- 프록시 기반 AOP 등록 -->
    <aop:aspectj-autoproxy />

    <mvc:interceptors>
		<!-- 컨트롤러 실행 전후로, 로그 메세지를 출력한다. -->    
   	 	<bean class="com.song7749.app.interceptor.LogMessageInterceptorHandle"/>
   		<!-- 로그인 인터셉터 -->
		<bean class="com.song7749.app.interceptor.LogInInterceptor"/>
   	 	<!-- html 을 제외한 호출에서 wrapper 를 생성한다. -->
   	 	<bean class="com.song7749.app.interceptor.ModelInterceptorHandle"/>
   	 	<!-- 판매자 API 인증 및 사용량 기록을 위한 인터셉터	-->
    </mvc:interceptors>


	<!-- 컨텐츠 네고시에이팅 뷰 리졸버 설정 -->
	<!-- 요청의 확장자, 헤더 타입 등을 기준으로 렌더링할 뷰를 결정해준다. -->
	<bean id="ContentNegotiatingViewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<ref bean="jsonView" />
				<ref bean="xmlView"/>
			</list>
		</property>
		<!-- 뷰 리졸버 설정 -->
		<property name="viewResolvers">
			<list>
				<!-- 뷰리졸버 -->
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean id="htmlView"  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/views/" />
					<property name="suffix" value=".jsp" />
					<property name="contentType" value="text/html; charset=UTF-8"/>
				</bean>				
			</list>
		</property>				
	</bean>	
	
	<!-- json View 빈 -->
	<bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" >
		<property name="extractValueFromSingleKeyModel" value="true"/>
	</bean>
	
	<!-- xml View 빈 -->
	<bean id="xmlView" class="org.springframework.web.servlet.view.xml.MarshallingView">
        <property name="marshaller" ref="xstreamMarshaller" />            
    </bean>			
	
	<!-- XStream Marshaller 빈 설정 -->
	<bean id="xstreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller" >
		<property name="autodetectAnnotations" value="true"/>
		
		<!-- 
		단일 정보를 마샬링 할 때 해당 Object를 xstream에서 인식을 못하기 때문에
		modelKey 또는 supportedClasses를 property로 지정해야한다.
		여기서는 supportedClasses를 이용하여 지정하였다.
		이에 모든 모델의 부모 클래스인 BaseObject를 지정하여 모든 모델에 대한
		마샬링을 지원 할 수 있다.
		참고 URL : http://www.sjune.net/archives/812
		-->
		<property name="supportedClasses">
			<list>
				<value>java.util.List</value>
				<value>java.util.Map</value>
				<value>java.util.Set</value>
				<value>java.lang.Integer</value>
				<value>java.lang.Long</value>
				<value>java.lang.String</value>
				<value>com.song7749.dl.base.BaseObject</value>
			</list>
		</property>
		<property name="aliases">
            <map>
            	<entry key="items" value="java.util.List" />
            </map>
        </property>
	</bean>
	
	<!-- Exception Resolver-->
	<bean class="com.song7749.dl.base.BaseExceptionResolver" >
		<property name="order" value="1" />	
	</bean>
</beans>
